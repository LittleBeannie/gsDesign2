[{"path":"https://littlebeannie.github.io/gsDesign2/articles/check_AHR.html","id":"test-1-unstratified-population","dir":"Articles","previous_headings":"","what":"Test 1: unstratified population","title":"check AHR()","text":"","code":"enrollRates <- tibble(Stratum = \"All\",                       duration = c(2, 10, 4, 4, 8),                       rate = c(5, 10, 0, 3, 6)) failRates <- tibble(Stratum = \"All\",                     duration = 1,                     failRate = c(.1, .2, .3, .4),                     hr = c(.9, .75, .8, .6),                     dropoutRate = .001) x1 <- AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30)) x2 <- AHR_(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30))  expect_equal(x1, x2)"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/check_AHR.html","id":"test-2-stratified-population","dir":"Articles","previous_headings":"","what":"Test 2: stratified population","title":"check AHR()","text":"","code":"enrollRates <- tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 3)),                       duration = c(2, 10, 4, 4, 8),                       rate = c(5, 10, 0, 3, 6)) failRates <- tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 2)),                     duration = 1,                     failRate = c(.1, .2, .3, .4),                     hr = c(.9, .75, .8, .6),                     dropoutRate = .001)  x1 <- AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30)) x2 <- AHR_(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30))  expect_equal(x1, x2)"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/check_eEvents_df.html","id":"test-1","dir":"Articles","previous_headings":"","what":"Test 1","title":"Check eEvents_df","text":"","code":"enrollRates <- tibble(duration = c(2, 1, 2), rate = c(5, 10, 20)) failRates <- tibble(duration = c(1, 1, 1),failRate = c(.05, .02, .01), dropoutRate = .01) totalDuration <- 20  x1 <- gsDesign::eEvents(lambda = failRates$failRate,                         S = failRates$duration[1 : (nrow(failRates) - 1)],                         eta = failRates$dropoutRate,                         gamma = enrollRates$rate,                         R = enrollRates$duration,                         T = totalDuration)$d  x2 <- eEvents_df_(enrollRates, failRates, totalDuration, simple = TRUE)  x3 <- eEvents_df(enrollRates, failRates, totalDuration, simple = TRUE)  tibble(method = c(\"gsDesign\", \"old version\", \"new version\"),        exp_events = c(x1, x2, x3)) %>% gt()"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/check_eEvents_df.html","id":"test-2","dir":"Articles","previous_headings":"","what":"Test 2","title":"Check eEvents_df","text":"","code":"enrollRates <- tibble(duration = c(1, 1, 8), rate = c(3, 2, 0)) failRates <- tibble(duration = c(4, Inf), failRate = c(.03, .06), dropoutRate = c(.001, .002)) totalDuration <- 7  x <- eEvents_df(enrollRates, failRates, totalDuration, simple = FALSE) %>% data.frame() # expected checked with alternate calculations in gsSurvNPH vignette y <- data.frame(t = c(0, 4), failRate = c(0.03, 0.06), Events = c(0.5642911, 0.5194821))  x %>% gt() %>% tab_header(title = \"From gsDesign2 new version\") y %>% gt() %>% tab_header(title = \"From gsSurvNPH vignette\")"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_AHR.html","id":"introduction-of-ahr","dir":"Articles","previous_headings":"","what":"Introduction of AHR()","title":"Usage of AHR","text":"AHR() provides geometric average hazard ratio various non-proportional hazards assumptions either single multiple strata studies. piecewise exponential distribution allows simple method specify distribution enrollment pattern enrollment, failure dropout rates changes time.","code":""},{"path":[]},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_AHR.html","id":"example-1-un-stratified-population","dir":"Articles","previous_headings":"Usage of AHR()","what":"Example 1: Un-stratified population","title":"Usage of AHR","text":"","code":"enrollRates <- tibble(Stratum = \"All\",                       duration = c(2, 10, 4, 4, 8),                       rate = c(5, 10, 0, 3, 6)) failRates <- tibble(Stratum = \"All\",                     duration = 1,                     failRate = c(.1, .2, .3, .4),                     hr = c(.9, .75, .8, .6),                     dropoutRate = .001) AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30)) ## # A tibble: 2 × 5 ##    Time   AHR Events  info info0 ##   <dbl> <dbl>  <dbl> <dbl> <dbl> ## 1    15 0.694   91.0  22.6  22.7 ## 2    30 0.685  154.   37.9  38.6"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_AHR.html","id":"example-2-stratified-population","dir":"Articles","previous_headings":"Usage of AHR()","what":"Example 2: Stratified population","title":"Usage of AHR","text":"","code":"enrollRates <- tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 3)),                       duration = c(2, 10, 4, 4, 8),                       rate = c(5, 10, 0, 3, 6)) failRates <- tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 2)),                     duration = 1,                     failRate = c(.1, .2, .3, .4),                     hr = c(.9, .75, .8, .6),                     dropoutRate = .001) AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30)) ## # A tibble: 2 × 5 ##    Time   AHR Events  info info0 ##   <dbl> <dbl>  <dbl> <dbl> <dbl> ## 1    15 0.733   113.  28.1  28.3 ## 2    30 0.718   166.  41.3  41.5"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_AHR.html","id":"inner-logic-of-ahr","dir":"Articles","previous_headings":"","what":"Inner Logic of AHR()","title":"Usage of AHR","text":"Let’s take un-stratified population example, enrollment rate, failure rates dropout rates Step 1: compute proportion group compute expected events different treatment group, stratum time period, iterate totalDuration Strata. Since example, one analysis time (totalDuration = 30) one stratum (Stratum = \"\"), iterate . one multiple analysis time strata, one can use loop bind results row. Step 2: subset enrollment rates failure rates stratum. Step 3: calculate enrollment rates experimental arm control arm, respectively. Step 4: update failure rate control experimental arm. Step 5: calculate expected number events control experimental eEvents_df(). t column start period, failRate column failure rate period, Events column expected events period. Step 6: combine results together output . Please note , output, info column based following input. alternative hypothesis \\(H_1\\) \\[   \\text{hr}   =   \\left\\{   \\begin{array}{ll}     0.9  & \\text{first 1 month} \\\\     0.75 & \\text{afterwards},   \\end{array}   \\right. \\] info = info1, info1 statistical information \\(H_1\\). notice enrollRates failRates always \\(H_1\\), call info, rather info1.","code":"enrollRates <- tibble(Stratum = \"All\",                       duration = c(2, 10, 4),                       rate = c(5, 10, 0)) failRates <- tibble(Stratum = \"All\",                     duration = 1,                     failRate = c(.1, .2),                     hr = c(.9, .75),                     dropoutRate = .001)  ratio <- 2  totalDuration <- 30 Qe <- ratio / (1 + ratio) Qc <- 1 - Qe ## The proportion of the experimental arm is  0.6666667 ## The proportion of the control arm is  0.3333333 td <- totalDuration s <- \"All\" enroll <- enrollRates %>% filter(Stratum == s) fail <- failRates %>% filter(Stratum == s) enroll_c <- enroll %>% mutate(rate = rate * Qc) enroll_e <- enroll %>% mutate(rate = rate * Qe) fail_c <- fail fail_e <- fail %>% mutate(failRate = failRate * hr) events_c <- eEvents_df(enrollRates = enroll_c, failRates = fail_c, totalDuration = td, simple = FALSE) events_e <- eEvents_df(enrollRates = enroll_e, failRates = fail_e, totalDuration = td, simple = FALSE) ## The expected number of events in the control arm is ## # A tibble: 3 × 3 ##       t failRate Events ##   <dbl>    <dbl>  <dbl> ## 1     0      0.1   3.49 ## 2     1      0.2  30.6  ## 3     2      0.2   1.98 ## The expected number of events in the experimental arm is ## # A tibble: 3 × 3 ##       t failRate Events ##   <dbl>    <dbl>  <dbl> ## 1     0     0.09   6.31 ## 2     1     0.15  57.2  ## 3     2     0.15   6.86 # combine control and experimental events <- rbind(events_c %>% mutate(Treatment = \"Control\"),                 events_e %>% mutate(Treatment = \"Experimental\")) %>%           arrange(t, Treatment) %>%            ungroup() %>%            # recompute HR, events, info by period           group_by(t) %>%           summarize(Stratum = s,                      info = (sum(1 / Events))^(-1),                     Events = sum(Events),                      HR = last(failRate) / first(failRate)) %>%            # compute info0           mutate(Time = td,                   lnhr = log(HR),                   info0 = Events * Qc * Qe) %>%           ungroup() %>%                       group_by(Time, Stratum, HR) %>%           summarize(t = min(t),                      Events = sum(Events),                      info0 = sum(info0),                      info = sum(info)) %>%           # pool time period together           group_by(Time) %>%           summarize(AHR = exp(sum(log(HR) * Events) / sum(Events)),                     Events = sum(Events),                     info = sum(info),                     info0 = sum(info0)) ## The overall expected number of events over the time is ## # A tibble: 1 × 5 ##    Time   AHR Events  info info0 ##   <dbl> <dbl>  <dbl> <dbl> <dbl> ## 1    30 0.763   106.  23.7  23.6 enrollRates <- tibble(Stratum = \"All\",                       duration = c(2, 10, 4),                       rate = c(5, 10, 0)) failRates <- tibble(Stratum = \"All\",                     duration = 1,                     failRate = c(.1, .2),                     hr = c(.9, .75),                     dropoutRate = .001)"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"introduction-of-eevents_df","dir":"Articles","previous_headings":"","what":"Introduction of eEvents_df","title":"Usage of eEvents_df","text":"eEvents_df() computes expected number events given analysis time strata assumption piecewise model: piecewise constant enrollment rates piecewise exponential failure rates piecewise censoring rates. piecewise exponential distribution allows simple method specify distribution enrollment pattern enrollment, failure dropout rates changes time. df eEvents_df() short data frame, since output data frame.","code":""},{"path":[]},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"example-1-single-enroll-single-fail-period","dir":"Articles","previous_headings":"Use Cases","what":"Example 1: Single Enroll + Single Fail Period","title":"Usage of eEvents_df","text":"","code":"enrollRates <- tibble(duration = 10, rate = 10) failRates <- tibble(duration = 100, failRate = log(2) / 6, dropoutRate = .01) totalDuration <- 22  eEvents_df(enrollRates = enrollRates, failRates = failRates, totalDuration = totalDuration, simple = FALSE) ## # A tibble: 1 × 3 ##       t failRate Events ##   <dbl>    <dbl>  <dbl> ## 1     0    0.116   80.4"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"example-2-multiple-enroll-single-fail-period","dir":"Articles","previous_headings":"Use Cases","what":"Example 2: Multiple Enroll + Single Fail Period","title":"Usage of eEvents_df","text":"","code":"enrollRates <- tibble(duration = c(5, 5), rate = c(10, 20)) failRates <- tibble(duration = 100, failRate = log(2)/6, dropoutRate = .01) totalDuration <- 22  eEvents_df(enrollRates = enrollRates, failRates = failRates, totalDuration = totalDuration, simple = FALSE) ## # A tibble: 1 × 3 ##       t failRate Events ##   <dbl>    <dbl>  <dbl> ## 1     0    0.116   119."},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"example-3-signle-enroll-multiple-fail-period","dir":"Articles","previous_headings":"Use Cases","what":"Example 3: Signle Enroll + Multiple Fail Period","title":"Usage of eEvents_df","text":"","code":"enrollRates <- tibble(duration = 10, rate = 10) failRates <- tibble(duration = c(20, 80), failRate = c(log(2)/6, log(2)/4), dropoutRate = .01) totalDuration <- 22  eEvents_df(enrollRates = enrollRates, failRates = failRates, totalDuration = totalDuration, simple = FALSE) ## # A tibble: 2 × 3 ##       t failRate Events ##   <dbl>    <dbl>  <dbl> ## 1     0    0.116 80.2   ## 2    20    0.173  0.250"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"example-4-multiple-duration","dir":"Articles","previous_headings":"Use Cases","what":"Example 4: Multiple Duration","title":"Usage of eEvents_df","text":"","code":"enrollRates <- tibble(duration = 10, rate = 10) failRates <- tibble(duration = 100, failRate = log(2) / 6, dropoutRate = .01) totalDuration <- c(2, 22)  try(eEvents_df(enrollRates = enrollRates, failRates = failRates, totalDuration = totalDuration, simple = FALSE)) ## Error in if (last(cumsum(failRates$duration)) < totalDuration) { :  ##   the condition has length > 1"},{"path":"https://littlebeannie.github.io/gsDesign2/articles/usage_eEvents_df.html","id":"inner-logic-of-eevents_df","dir":"Articles","previous_headings":"","what":"Inner Logic of eEvents_df()","title":"Usage of eEvents_df","text":"Step 1: set analysis time. Step 2: set enrollment rates.  Step 3: set failure rates dropout rates.   Given piecewise enrollment rates, failure rates, dropout rates, time line divided several parts: \\((0, 5]\\) (5 change point enrollment rates); \\((5, 10]\\) (10 another change point enrollment rates); \\((10, 20]\\) (20 change point failure rates); \\((20, 50]\\) (50 analysis time); \\((50, \\infty]\\) (analysis time).  Given sub-intervals, objective calculate expected number events sub-intervals. Step 4: divide time line enrollments Step 5: divide time line failure & dropout rates df_2, one needs discriminate analysis time (totalDuration = 50) beyond total failure rate duration. Step 6: divide time line considering change points enrollment, failure, dropout rates. find lots NA, can imputed piecewise model. Step 7: compute expected number events sub-intervals following technical details vignette ``computing expected events interval risk’’ Step 8: output results","code":"totalDuration <- 50 enrollRates <- tibble(duration = c(5, 5), rate = c(10, 20))  # create a step function (sf) to define enrollment rates over time sf.enrollRate <- stepfun(c(0, cumsum(enrollRates$duration)),                          c(0, enrollRates$rate, 0),                          right = FALSE)  plot(sf.enrollRate,       xlab = \"duration\", ylab = \"enrollment rates\",       main = \"Piecewise enrollment rate over time\", xlim = c(-0.01, 21)) failRates <- tibble(duration = c(20, 80), failRate = c(0.1, 0.2), dropoutRate = .01)  # get the time points where the failure rates change startFail <- c(0, cumsum(failRates$duration))  # plot the piecewise failure rates sf.failRate <- stepfun(startFail,                        c(0, failRates$failRate, last(failRates$failRate)),                        right = FALSE) plot(sf.failRate,       xlab = \"duration\", ylab = \"failure rates\",       main = \"Piecewise failure rate over time\", xlim = c(-0.01, 101)) # plot the piecewise dropout rate sf.dropoutRate <- stepfun(startFail,                           c(0, failRates$dropoutRate, last(failRates$dropoutRate)),                           right = FALSE) plot(sf.dropoutRate,       xlab = \"duration\", ylab = \"dropout rates\",       main = \"Piecewise dropout rate over time\", xlim = c(-0.01, 101)) df_1 <- tibble(startEnroll = c(0, cumsum(enrollRates$duration)),                endFail = totalDuration - startEnroll,                rate = c(enrollRates$rate, 0)) df_2 <- tibble(endFail = cumsum(failRates$duration),                startEnroll = totalDuration - endFail,                failRate = failRates$failRate,                dropoutRate = failRates$dropoutRate) # if the analysis time is after the total failure rate duration if(sum(failRates$duration) < totalDuration){   df_2 <- df_2[-nrow(df_2), ] }else{   df_2 <- df_2 %>% filter(startEnroll > 0) } df <- full_join(df_1, df_2, by = c(\"startEnroll\", \"endFail\")) %>% arrange(endFail) df <- df %>% mutate(endEnroll = lag(startEnroll, default = as.numeric(totalDuration)),                     startFail = lag(endFail, default = 0),                     duration = endEnroll - startEnroll,                     failRate = sf.failRate(startFail),                     dropoutRate = sf.dropoutRate(startFail),                     enrollRate = sf.enrollRate(startEnroll)) %>%               select(-rate) # create 2 auxiliary variable for failure & dropout rate              # q: number of expected events in a sub-interval              # Q: cumulative product of q (pool all sub-intervals) df <- df %>% mutate(q = exp(-duration * (failRate + dropoutRate)),                     Q = lag(cumprod(q), default = 1)) %>%              arrange(desc(startFail)) %>%              # create another 2 auxiliary variable for enroll rate              # g: number of expected subjects in a sub-interval              # G: cumulative sum of g (pool all sub-intervals)              mutate(g = enrollRate * duration,                     G = lag(cumsum(g), default = 0)) %>%              arrange(startFail) %>%              # compute expected events as nbar in a sub-interval              mutate(d = ifelse(failRate == 0, 0, Q * (1 - q) * failRate / (failRate + dropoutRate)),                     nbar = ifelse(failRate == 0, 0, G * d + (failRate * Q * enrollRate) / (failRate + dropoutRate) * (duration - (1 - q) / (failRate + dropoutRate)))) sf.startFail <- stepfun(startFail, c(0, startFail), right = FALSE) df <- df %>%    transmute(t = endFail, failRate = failRate, Events = nbar, startFail = sf.startFail(startFail)) %>%    group_by(startFail) %>%   summarize(failRate = first(failRate), Events = sum(Events)) %>%   mutate(t = startFail) %>%    select(\"t\", \"failRate\", \"Events\")  df %>% gt()"},{"path":"https://littlebeannie.github.io/gsDesign2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Keaven Anderson. Author, maintainer. Yujie Zhao. Author. Merck Sharp & Dohme Corp. Copyright holder.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anderson K, Zhao Y (2022). gsDesign2: Group sequential design non-constant effect. https://github.com/LittleBeannie/gsDesign2, https://littlebeannie.github.io/gsDesign2/.","code":"@Manual{,   title = {gsDesign2: Group sequential design with non-constant effect},   author = {Keaven Anderson and Yujie Zhao},   year = {2022},   note = {https://github.com/LittleBeannie/gsDesign2, https://littlebeannie.github.io/gsDesign2/}, }"},{"path":[]},{"path":"https://littlebeannie.github.io/gsDesign2/index.html","id":"objective","dir":"","previous_headings":"","what":"Objective","title":"Group sequential design with non-constant effect","text":"goal gsDesign2 enable fixed group sequential design non-proportional hazards. Piecewise constant enrollment, failure rates dropout rates stratified population available enable highly flexible enrollment, time--event time--dropout assumptions. Substantial flexibility top gsDesign package intended selecting boundaries. work progress, substantial capabilities enabled. Comments usability features encouraged development version package. goal gsDesign2 enable group sequential trial design time--event endpoints non-proportional hazards assumptions. package still maturing; package functions become stable, likely included gsDesign2 package.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Group sequential design with non-constant effect","text":"can install gsdmvn :","code":"remotes::install_github(\"LittleBeannie/gsDesign2\")"},{"path":"https://littlebeannie.github.io/gsDesign2/index.html","id":"use-cases","dir":"","previous_headings":"","what":"Use cases","title":"Group sequential design with non-constant effect","text":"…","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":null,"dir":"Reference","previous_headings":"","what":"Average hazard ratio under non-proportional hazards (test version) — AHR","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"AHR() provides geometric average hazard ratio various non-proportional hazards assumptions either single multiple strata studies. piecewise exponential distribution allows simple method specify distribution enrollment pattern enrollment, failure dropout rates changes time.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"","code":"AHR(   enrollRates = tibble::tibble(Stratum = \"All\", duration = c(2, 2, 10), rate = c(3, 6,     9)),   failRates = tibble::tibble(Stratum = \"All\", duration = c(3, 100), failRate =     log(2)/c(9, 18), hr = c(0.9, 0.6), dropoutRate = rep(0.001, 2)),   totalDuration = 30,   ratio = 1,   simple = TRUE )"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"enrollRates Piecewise constant enrollment rates stratum time period. failRates Piecewise constant control group failure rates, duration piecewise constant period, hazard ratio experimental vs control, dropout rates stratum time period. totalDuration Total follow-start enrollment data cutoff; can single value vector positive numbers. ratio ratio experimental control randomization. simple logical; TRUE (default), value input totalDuration overall event count, statistical information average hazard ratio given; FALSE, hazard ratio, expected events statistical information produced stratum underlying hazard ratio.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"tibble Time (totalDuration), AHR (average hazard ratio), Events (expected number events), info (information given scenarios), info0 (information related null hypothesis) value totalDuration input; simple=FALSE, Stratum t (beginning constant HR period) also returned HR returned instead AHR","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"contents section shown PDF user manual .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/AHR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average hazard ratio under non-proportional hazards (test version) — AHR","text":"","code":"# Example: default AHR() #> # A tibble: 1 × 5 #>    Time   AHR Events  info info0 #>   <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1    30 0.695   58.5  14.3  14.6  # Example: default with multiple analysis times (varying totalDuration)  AHR(totalDuration = c(15, 30)) #> # A tibble: 2 × 5 #>    Time   AHR Events  info info0 #>   <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1    15 0.786   30.3  7.44  7.57 #> 2    30 0.695   58.5 14.3  14.6   # Stratified population enrollRates <- tibble::tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 3)),                               duration = c(2, 10, 4, 4, 8),                               rate = c(5, 10, 0, 3, 6)) failRates <- tibble::tibble(Stratum = c(rep(\"Low\", 2), rep(\"High\", 2)),                             duration = 1,                             failRate = c(.1, .2, .3, .4),                             hr = c(.9, .75, .8, .6),                             dropoutRate = .001) AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30)) #> # A tibble: 2 × 5 #>    Time   AHR Events  info info0 #>   <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1    15 0.733   113.  28.1  28.3 #> 2    30 0.718   166.  41.3  41.5  # Same example, give results by strata and time period AHR(enrollRates = enrollRates, failRates = failRates, totalDuration = c(15, 30), simple = FALSE) #> # A tibble: 8 × 7 #> # Groups:   Time, Stratum [4] #>    Time Stratum     t    HR Events  info info0 #>   <dbl> <chr>   <dbl> <dbl>  <dbl> <dbl> <dbl> #> 1    15 High        0  0.8   12.1   2.99  3.02 #> 2    15 High        1  0.6   23.1   5.72  5.78 #> 3    15 Low         0  0.9    9.96  2.48  2.49 #> 4    15 Low         1  0.75  68.1  16.9  17.0  #> 5    30 High        0  0.8   14.2   3.51  3.54 #> 6    30 High        1  0.6   45.2  11.2  11.3  #> 7    30 Low         0  0.9    9.96  2.48  2.49 #> 8    30 Low         1  0.75  96.8  24.1  24.2"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected events observed under piecewise exponential model — eEvents_df","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"eEvents_df computes expected events time strata assumption piecewise constant enrollment rates piecewise exponential failure censoring rates. piecewise exponential distribution allows simple method specify distribtuion enrollment pattern enrollment, failure dropout rates changes time. main purpose may generate trial can analyzed single point time using group sequential methods, routine can also used simulate adaptive trial design. intent enable sample size calculations non-proportional hazards assumptions stratified populations.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"","code":"eEvents_df(   enrollRates = tibble::tibble(duration = c(2, 2, 10), rate = c(3, 6, 9)),   failRates = tibble::tibble(duration = c(3, 100), failRate = log(2)/c(9, 18),     dropoutRate = rep(0.001, 2)),   totalDuration = 25,   simple = TRUE )"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"enrollRates Enrollment rates; see details examples failRates Failure rates dropout rates period totalDuration Total follow-start enrollment data cutoff simple default (TRUE), return numeric expected number events, otherwise tibble described .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"default simple=TRUE return total expected number events real number. Otherwise, simple=FALSE tibble returned following variables period specified 'failRates': t start period, failRate failure rate period Events expected events period, records returned tibble correspond input tibble  failRates.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"periods generally supplied output input. intent enable expected event calculations tidy format maximize flexibility variety purposes.","code":""},{"path":[]},{"path":"https://littlebeannie.github.io/gsDesign2/reference/eEvents_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected events observed under piecewise exponential model — eEvents_df","text":"","code":"library(tibble) # Default arguments, simple output (total event count only) eEvents_df() #> [1] 57.3537  # Event count by time period eEvents_df(simple = FALSE) #> # A tibble: 2 × 3 #>       t failRate Events #>   <dbl>    <dbl>  <dbl> #> 1     0   0.0770   22.2 #> 2     3   0.0385   35.1  # Early cutoff eEvents_df(totalDuration = .5) #> [1] 0.02850923  # Single time period example eEvents_df(enrollRates = tibble(duration = 10,rate = 10),            failRates = tibble(duration=100, failRate = log(2) / 6 ,dropoutRate = .01),            totalDuration = 22,            simple = FALSE) #> # A tibble: 1 × 3 #>       t failRate Events #>   <dbl>    <dbl>  <dbl> #> 1     0    0.116   80.4  # Single time period example, multiple enrollment periods eEvents_df(enrollRates = tibble(duration = c(5,5), rate = c(10, 20)),            failRates = tibble(duration = 100, failRate = log(2)/6, dropoutRate = .01),            totalDuration = 22, simple = FALSE) #> # A tibble: 1 × 3 #>       t failRate Events #>   <dbl>    <dbl>  <dbl> #> 1     0    0.116   119."},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid points for group sequential design numerical integration — gridpts","title":"Grid points for group sequential design numerical integration — gridpts","text":"Points weights Simpson's rule numerical integration p 349 - 350 Jennison Turnbull book. used arbitrary integration, canonical form Jennison Turnbull. mu computed elsewhere drift parameter times sqrt information. Since lower-level routine, checking input done; calling routines ensure input correct. Lower limit integration can -Inf upper limit integration can Inf","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid points for group sequential design numerical integration — gridpts","text":"","code":"gridpts(r = 18, mu = 0, a = -Inf, b = Inf)"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid points for group sequential design numerical integration — gridpts","text":"r Integer, least 2; default 18 recommended Jennison Turnbull mu Mean normal distribution (scalar) consideration lower limit integration (scalar) b upper limit integration (scalar > )","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid points for group sequential design numerical integration — gridpts","text":"list grid points z numerical integration weights w","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grid points for group sequential design numerical integration — gridpts","text":"Jennison Turnbull (p 350) claim accuracy 10E-6 r=16. numerical integration grid spreads tail enable accurate tail probability calcuations.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Grid points for group sequential design numerical integration — gridpts","text":"contents section shown PDF user manual .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gridpts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid points for group sequential design numerical integration — gridpts","text":"","code":"# approximate variance of standard normal (i.e., 1) g <- gridpts() #> Error in .gridptsRcpp(r = r, mu = mu, a = a, b = b): object '_gsdmvn_gridptsRcpp' not found sum((g$z)^2 * g$w * dnorm(g$z)) #> Error in eval(expr, envir, enclos): object 'g' not found  # approximate probability above .95 quantile (i.e., .05) g <- gridpts(a = qnorm(.95), b = Inf) #> Error in .gridptsRcpp(r = r, mu = mu, a = a, b = b): object '_gsdmvn_gridptsRcpp' not found sum(g$w * dnorm(g$z)) #> Error in eval(expr, envir, enclos): object 'g' not found"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":null,"dir":"Reference","previous_headings":"","what":"Information and effect size based on AHR approximation — gs_info_ahr","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"Based piecewise enrollment rate, failure rate, dropout rates computes approximate information effect size using average hazard ratio model.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"","code":"gs_info_ahr(   enrollRates = tibble::tibble(Stratum = \"All\", duration = c(2, 2, 10), rate = c(3, 6,     9)),   failRates = tibble::tibble(Stratum = \"All\", duration = c(3, 100), failRate =     log(2)/c(9, 18), hr = c(0.9, 0.6), dropoutRate = rep(0.001, 2)),   ratio = 1,   events = NULL,   analysisTimes = NULL )"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"enrollRates enrollment rates failRates failure dropout rates ratio Experimental:Control randomization ratio events Targeted minimum events analysis analysisTimes Targeted minimum study duration analysis","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"tibble columns Analysis, Time, AHR, Events, theta, info, info0. info, info0 contains statistical information H1, H0, respectively. analysis k, Time[k] maximum analysisTimes[k] expected time required accrue targeted events[k]. AHR expected average hazard ratio analysis.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"AHR() function computes statistical information targeted event times. tEvents() function used get events average HR targeted analysisTimes.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"contents section shown PDF user manual .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/gs_info_ahr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information and effect size based on AHR approximation — gs_info_ahr","text":"","code":"library(gsDesign) #> Loading required package: ggplot2 library(gsDesign2)  # Only put in targeted events gs_info_ahr(events = c(30, 40, 50)) #> Error: 'tEvents' is not an exported object from 'namespace:gsDesign2' # Only put in targeted analysis times gs_info_ahr(analysisTimes = c(18, 27, 36)) #> # A tibble: 3 × 7 #>   Analysis  Time Events   AHR theta  info info0 #>      <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1        1    18   37.6 0.755 0.282  9.21  9.40 #> 2        2    27   54.0 0.704 0.351 13.2  13.5  #> 3        3    36   66.2 0.683 0.381 16.3  16.6  # Some analysis times after time at which targeted events accrue # Check that both Time >= input analysisTime and Events >= input events gs_info_ahr(events = c(30, 40, 50), analysisTimes = c(16, 19, 26)) #> Error: 'tEvents' is not an exported object from 'namespace:gsDesign2' gs_info_ahr(events = c(30, 40, 50), analysisTimes = c(14, 20, 24)) #> Error: 'tEvents' is not an exported object from 'namespace:gsDesign2'"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize numerical integration for group sequential design — h1","title":"Initialize numerical integration for group sequential design — h1","text":"Compute grid points first interim analysis group sequential design","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize numerical integration for group sequential design — h1","text":"","code":"h1(r = 18, theta = 0, I = 1, a = -Inf, b = Inf)"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize numerical integration for group sequential design — h1","text":"r Integer, least 2; default 18 recommended Jennison Turnbull theta Drift parameter first analysis Information first analysis lower limit integration (scalar) b upper limit integration (scalar > )","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize numerical integration for group sequential design — h1","text":"list grid points z, numerical integration weights w, normal density mean mu = theta * sqrt{} variance 1 times weight w.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize numerical integration for group sequential design — h1","text":"Mean standard normal distribution consideration mu = theta * sqrt()","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Initialize numerical integration for group sequential design — h1","text":"contents section shown PDF user manual .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/h1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize numerical integration for group sequential design — h1","text":"","code":"# Replicate variance of 1, mean of 35 g <- h1(theta = 5, I = 49) #> Error in .h1Rcpp(r = r, theta = theta, I = I, a = a, b = b): object '_gsdmvn_h1Rcpp' not found mu <- sum(g$z * g$h) #> Error in eval(expr, envir, enclos): object 'g' not found var <- sum((g$z - mu)^2 * g$h) #> Error in eval(expr, envir, enclos): object 'g' not found  # Replicate p-value of .0001 by numerical integration of tail g <- h1(a = qnorm(.9999)) #> Error in .h1Rcpp(r = r, theta = theta, I = I, a = a, b = b): object '_gsdmvn_h1Rcpp' not found sum(g$h) #> Error in eval(expr, envir, enclos): object 'g' not found"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Update numerical integration for group sequential design — hupdate","title":"Update numerical integration for group sequential design — hupdate","text":"Update grid points numerical integration one analysis next","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update numerical integration for group sequential design — hupdate","text":"","code":"hupdate(   r = 18,   theta = 0,   I = 2,   a = -Inf,   b = Inf,   thetam1 = 0,   Im1 = 1,   gm1 = h1() )"},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update numerical integration for group sequential design — hupdate","text":"r Integer, least 2; default 18 recommended Jennison Turnbull theta Drift parameter current analysis Information current analysis lower limit integration (scalar) b upper limit integration (scalar > ) thetam1 Drift parameter previous analysis Im1 Information previous analysis gm1 numerical integration grid h1() previous run hupdate()","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update numerical integration for group sequential design — hupdate","text":"list grid points z, numerical integration weights w, normal density mean mu = theta * sqrt{} variance 1 times weight w.","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Update numerical integration for group sequential design — hupdate","text":"contents section shown PDF user manual .","code":""},{"path":"https://littlebeannie.github.io/gsDesign2/reference/hupdate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update numerical integration for group sequential design — hupdate","text":"","code":"# 2nd analysis with no interim bound and drift 0 should have mean 0, variance 1 g <- hupdate() #> Error in .hupdateRcpp(r = r, theta = theta, I = I, a = a, b = b, thetam1 = thetam1,     Im1 = Im1, gm1 = gm1): object '_gsdmvn_hupdateRcpp' not found mu <- sum(g$z * g$h) #> Error in eval(expr, envir, enclos): object 'g' not found var <- sum((g$z - mu)^2 * g$h) #> Error in eval(expr, envir, enclos): object 'g' not found"}]
